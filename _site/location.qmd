---
title: "Location"
description-meta: "How do political parties chase your vote, what do they want to keep hidden, and how much money do they spend on it? In the lead-up to the elections, we monitor political microtargeting."
format:
  html:
    page-layout: full
---


```{r setup, include=FALSE}
# here::i_am("wtm_gb.Rproj")

## Global options
knitr::opts_chunk$set(
  cache = F,
  echo = F,
  warning = F,
  message = F,
  cache.lazy = FALSE
)



# pacman::p_load(tidyverse, highcharter)
library(tidyverse)
library(highcharter)
library(gt)

pacman::p_load(knitr, tidyverse, rmarkdown, openxlsx, sf, shiny)

source(here::here("utils.R"))
source(here::here("party_utils.R"))

color_dat <- color_dat %>% 
  mutate(colors = case_when(
    colors == "orange" ~ "#f77604",
    colors == "green" ~ "#7aba2d",
    colors == "darkgray" ~ "#A9A9A9",
    colors == "darkblue" ~ "#000080",
    colors == "lightblue" ~ "#ADD8E6",
    colors == "#ccc" ~ "#cccccc",
    is.na(colors) ~ "#00BFFF",
    T ~ colors
  ))

sets <- list(cntry = "GB")


```


## Geographical Targeting

The chart below displays the geographical targeting of that political parties on Meta platforms.

::: {.panel-tabset}


### `r last30days_string`


::: {.panel-tabset}


#### Search



```{js}
// Custom range filter with value label
function rangeFilter(column, state) {
  // Get min and max values from raw table data
  let min = Infinity
  let max = 0
  state.data.forEach(function(row) {
    const value = row[column.id]
    if (value < min) {
      min = Math.floor(value)
    } else if (value > max) {
      max = Math.ceil(value)
    }
  })

  const filterValue = column.filterValue || min
  const input = React.createElement('input', {
    type: 'range',
    value: filterValue,
    min: min,
    max: max,
    onChange: function(event) {
      // Set to undefined to clear the filter
      column.setFilter(event.target.value || undefined)
    },
    style: { width: '100%', marginRight: '8px' },
    'aria-label': 'Filter ' + column.name
  })

  return React.createElement(
    'div',
    { style: { display: 'flex', alignItems: 'center', height: '100%' } },
    [input, filterValue]
  )
}

// Filter method that filters numeric columns by minimum value
function filterMinValue(rows, columnId, filterValue) {
  return rows.filter(function(row) {
    return row.values[columnId] >= filterValue
  })
}
```


```{r}
dataListFilter <- function(tableId, style = "width: 100%; height: 28px;") {
  function(values, name) {
    dataListId <- sprintf("%s-%s-list", tableId, name)
    tagList(
      tags$input(
        type = "text",
        list = dataListId,
        oninput = sprintf("Reactable.setFilter('%s', '%s', event.target.value || undefined)", tableId, name),
        "aria-label" = sprintf("Filter %s", name),
        style = style
      ),
      tags$datalist(
        id = dataListId,
        lapply(unique(values), function(value) tags$option(value = value))
      )
    )
  }
}
pacman::p_load(fontawesome, reactable, htmltools)
```


```{r}

secodndround <-   election_dat30 %>%
    filter(type == "location") %>% 
      mutate(amount_spent = as.numeric(total_spend_formatted)*total_spend_pct) %>% 
    select(amount_spent, page_name, value, location_type,is_exclusion, num_ads, party, page_id) %>%
    mutate(is_exclusion = as.logical(is_exclusion)) %>% 
    mutate(value = str_remove_all(value, ", Great Britain")) %>% 
    arrange(desc(amount_spent)) %>% 
    filter(!is_exclusion) %>% 
    select(-is_exclusion)
htmltools::browsable(
  tagList(

  reactable(
    secodndround,
  columns = list(
    amount_spent = colDef(
      name = "💰 Spending",
      format = colFormat(prefix = "$", separators = TRUE, digits = 0),
      filterMethod = JS("filterMinValue"),
      filterInput = JS("rangeFilter"),
      filterable = TRUE
      # style = function(value) {
      #   # normalized <- (value - min(value)) / (max(value) - min(value))
      #   # background <- rgb(colorRamp(c("#e3f2fd", "#2196f3"))(normalized), maxColorValue = 255)
      #   list(background = "#2196f3", fontWeight = 600)
      # }#,
      # details = function(index) {
      #   value <- election_dat30$amount_spent[index]
      #   div(
      #     style = "padding: 8px"#,
      #     # progressBar(
      #     #   value = value / max(election_dat30$amount_spent),
      #     #   showLabel = TRUE,
      #     #   labelPosition = "bottom",
      #     #   labelStyle = "white-space: nowrap;"
      #     # )
      #   )
      # }
    ),
page_name = colDef(
  name = "📌 Page",
        cell = function(value, index) {
          # Access row-specific data using `index`
          theid <- secodndround[index, "page_id"]
    
    # Fallback for missing IDs
    if (is.na(theid) || length(theid) == 0) theid <- "unknown_page"
    
    # Build the hyperlink
    href <- if (theid != "unknown_page") {
      paste0("https://facebook.com/", theid)
    } else {
      "#"
    }
    
    # Return the link
    tags$a(
      href = href,
      target = "_blank",
      rel = "noopener noreferrer",
      style = "margin-left: 8px; color: #2196f3; text-decoration: none;",
      value  # Display the original value, not value_clean
    )
  },
  filterable = TRUE,
  filterInput = dataListFilter("elex")
),
    value = colDef(      
      filterInput = dataListFilter("elex"),

      filterable = TRUE,
      name = "🎯 Location",
      cell = function(value) tagList(
        span(style = "margin-right: 8px"),
        value,
        # a(href = paste0("https://www.google.com/maps/search/?api=1&query=", URLencode(value)),
a(
  href = paste0("https://www.google.com/maps/search/?api=1&query=", URLencode(paste(value, "Great Britain"))),
  target = "_blank",  # Opens link in a new tab/window
  rel = "noopener noreferrer",  # Security best practice
  icon("map-marker-alt"),
  style = "margin-left: 8px; color: #2196f3; text-decoration: none;"
)
      )
    ),
    location_type = colDef(
      name = "📌 Type",
      cell = function(value) tagList(
        # icon("facebook"),  # Use appropriate icon
        div(
          style = "margin-left: 8px; display: inline-block; vertical-align: middle;",
          value
        )
      ),
      filterable = TRUE,
      filterInput = dataListFilter("elex")

    ),
    num_ads = colDef(
      name = "#️⃣ Ads",
        cell = function(value, index) {
          # Access row-specific data using `index`
          theid <- secodndround[index, "page_id"]
    
    # Fallback for missing IDs
    if (is.na(theid) || length(theid) == 0) theid <- "unknown_page"
    
    # Build the hyperlink
    href <- if (theid != "unknown_page") {
      paste0("https://www.facebook.com/ads/library/?view_all_page_id=", theid, "&country=",sets$cntry, "&active_status=all")
    } else {
      "#"
    }
    # Return the link
    tags$a(
      href = href,
      target = "_blank",
      rel = "noopener noreferrer",
      style = "margin-left: 8px; color: #2196f3; text-decoration: none;",
      value  # Display the original value, not value_clean
    )
    },
      filterable = TRUE,
      filterMethod = JS("filterMinValue"),
      filterInput = JS("rangeFilter")
    ),
    # is_exclusion = colDef(
    #   name = "🚫 Exclusion",
    #   cell = function(value) {
    #     status_style <- ifelse(value,
    #       "background: #ffebee; color: #c62828;",
    #       "background: #e8f5e9; color: #2e7d32;"
    #     )
    #     div(
    #       style = paste(status_style, "padding: 4px 8px; border-radius: 12px; display: inline-block;"),
    #       ifelse(value, "Excluded", "Included")
    #     )
    #   },
    #   filterable = TRUE),
    #   filterInput = function(values, name) {
    #     tags$select(
    #       onChange = JS(sprintf("Reactable.setFilter('%s', '%s', event.target.value || undefined)", "table-id", name)),
    #       tags$option(value = "", "All"),
    #       tags$option(value = "TRUE", "Excluded"),
    #       tags$option(value = "FALSE", "Included"),
    #       style = "width: 100%; padding: 4px; border-radius: 4px;"
    #     )
    #   }
    # )#,
    party = colDef(
      name = "📢 Party",
      cell = function(value) {
        # color_mapping <- c(color_dat$party = color_dat$colors)
        color_mapping <- setNames(color_dat$colors, color_dat$party)
        div(
          style = sprintf(
            "background: %s; color: %s; padding: 4px 8px; border-radius: 12px;
             display: inline-block; font-weight: 600; text-shadow: 0 1px 1px rgba(0,0,0,0.1);",
            color_mapping[value],
            "#FFFFFF"
          ),
          value
        )
      },
      filterable = TRUE,
      filterInput = dataListFilter("elex")
    ),
        # Hide the `page_id` column
        page_id = colDef(show = FALSE)
      ),
  defaultPageSize = 10,
  # searchable = TRUE,
  showPageSizeOptions = TRUE,
  paginationType = "jump",
  theme = reactableTheme(
    headerStyle = list(
      backgroundColor = "#f8f9fa",
      borderBottom = "2px solid #dee2e6",
      fontWeight = 600,
      textTransform = "uppercase",
      letterSpacing = "0.5px"
    ),
    rowStyle = list(
      "&:hover" = list(backgroundColor = "rgba(33,150,243,0.1)"),
      transition = "background-color 0.3s ease"
    ),
    inputStyle = list(
      padding = "6px 12px",
      borderRadius = "4px",
      border = "1px solid #ced4da",
      "&:focus" = list(borderColor = "#2196f3", boxShadow = "0 0 0 0.2rem rgba(33,150,243,0.25)")
    )
  ),
  defaultColDef = colDef(
    headerClass = "header",
    align = "left",
    minWidth = 150
  ),
  bordered = TRUE,
  highlight = TRUE,
  # striped = TRUE,
  elementId = "elex"#,
  # footer = div(
  #   style = "padding: 16px; background: #f8f9fa; border-top: 2px solid #dee2e6;",
  #   div(
  #     style = "display: flex; justify-content: space-between;",
  #     div(
  #       "Total Locations: ", strong(nrow(election_dat30)),
  #       style = "margin-right: 24px;"
  #     ),
  #     div(
  #       "Total Spending: ", strong(scales::dollar_format()(sum(election_dat30$amount_spent))),
  #       style = "color: #2196f3; font-weight: 600;"
  #     )
  #   )
  # )
),
    tags$button(
      tagList(fontawesome::fa("download"), "Download as CSV"),
      onclick = "Reactable.downloadDataCSV('elex', 'targeting.csv')"
    )
)
)
```

<br>

The table above shows spending data from Meta at the advertiser level, broken down per targeting criterion. This means we can’t account for combinations of targeting criteria.

For example, if one ad targets two ZIP codes with $100 and another targets just one of those ZIP codes with $100, we can’t separate the overlap. In this case, we record $200 spent on the shared ZIP code and $100 on the other.

#### Regions



> The size of each area in the chart indicates the amount of money spent by each political party on specific locations.

```{r,fig.width=10, fig.height=8, echo = F}
color_dat <- color_dat %>% 
  mutate(colors = ifelse(colors == "#CCC", "#cccccc", colors))

library(treemap)
region_dat <- election_dat30 %>%
  filter(type == "location") %>%
  filter(location_type == "regions") %>%
  filter(is_exclusion == FALSE)  %>%
  mutate(likely_together = paste0(total_spend_pct,num_ads) %>% as.factor() %>% as.numeric()) %>%
  group_by(internal_id) %>%
  add_count(likely_together, name = "n_clusters") %>%
  ungroup() %>%
  mutate(total_spend_formatted = total_spend_formatted*total_spend_pct) %>%
  mutate(total_spend_formatted = total_spend_formatted/n_clusters) %>%
  group_by(party, value) %>%
  summarise(total_spend_formatted = sum(total_spend_formatted),
            num_ads = sum(num_ads)) %>%
  ungroup() %>%
  rename(region = value) %>%
  mutate(region = str_remove_all(region, ", Great Britain"))

the_colors <- region_dat %>%
  group_by(party) %>%
  summarize(total_spend_formatted = sum(total_spend_formatted)) %>%
  ungroup() %>%
  mutate(party = fct_relevel(party)) %>%
  left_join(color_dat) %>%
  arrange(party) %>%
  drop_na(colors) %>%
  pull(colors)

if(nrow(region_dat)!=0) {
  # Static version
  tm <- treemap(
    region_dat,
    index = c("party", "region"),
    vSize = "total_spend_formatted",
    vColor = "party",
    type = "index",
    title = "", draw = T,
    align.labels = list(c("right", "bottom"),
                        c("center", "center")),
    fontsize.labels = c(21, 10),
    # size of labels. Give the size per level of aggregation: size for group, size for subgroup, sub-subgroups...

    fontcolor.labels = c("white", "white"),
    # Color of labels
    palette = the_colors
  )


} else {
  shiny::HTML("No data (yet).")
}
#
# library(d3treeR)
#
# # make it interactive ("rootname" becomes the title of the plot):
# inter <- d3tree2( tm,  rootname = "Targeting " )
# inter
# # read_csv("../data/PoliticalAds.csv") %>%
# #   filter(CountryCode == "turkey")
# #   count(CountryCode, sort = T)
#
# # ggsave("img/tregion.pdf",width=10, height=8, dpi = 900)
#
# library(highcharter)
#
# library(highcharter)
# library(dplyr)

# Convert data to hierarchical structure
# hierarchical_data <- data_to_hierarchical(region_dat, c("party", "region"), "total_spend_formatted", color = the_colors)
#
# # Create treemap
# hchart(hierarchical_data, type = "treemap", allowDrillToNode = TRUE,
#       color = the_colors) %>%
#   hc_title(text = "") %>%
#   # hc_colorAxis(minColor = "#FFFFFF", maxColor = highchart_palette()[[2]]) %>%
#   hc_tooltip(
#     pointFormat = '<b>{point.name}:</b> {point.value}<br/>',
#     followPointer = TRUE
#   ) %>%
#   hc_plotOptions(
#     treemap = list(
#       layoutAlgorithm = 'squarified',
#       dataLabels = list(
#         enabled = TRUE,
#         align = 'left',
#         verticalAlign = 'top',
#         style = list(fontSize = '15px')
#       )
#     )
#   )

```


#### Cities

> The size of each area in the chart indicates the amount of money spent by each political party on specific locations.

```{r,fig.width=10, fig.height=8}
library(treemap)
region_dat <- election_dat30 %>%
  filter(type == "location") %>%
  filter(location_type == "CITY") %>%
  filter(is_exclusion == FALSE)  %>%
  mutate(likely_together = paste0(total_spend_pct,num_ads) %>% as.factor() %>% as.numeric()) %>%
  group_by(internal_id) %>%
  add_count(likely_together, name = "n_clusters") %>%
  ungroup() %>%
  mutate(total_spend_formatted = total_spend_formatted*total_spend_pct) %>%
  mutate(total_spend_formatted = total_spend_formatted/n_clusters) %>%
  group_by(party, value) %>%
  summarise(total_spend_formatted = sum(total_spend_formatted),
            num_ads = sum(num_ads)) %>%
  ungroup() %>%
  rename(region = value) %>%
  mutate(region = str_remove_all(region, ", Great Britain"))

the_colors <- region_dat %>%
  group_by(party) %>%
  summarize(total_spend_formatted = sum(total_spend_formatted)) %>%
  ungroup() %>%
  mutate(party = fct_relevel(party)) %>%
  left_join(color_dat) %>%
  arrange(party) %>%
  drop_na(colors) %>%
  pull(colors)

if(nrow(region_dat)!=0) {
  ## Static version
  tm <- treemap(
    region_dat,
    index = c("party", "region"),
    vSize = "total_spend_formatted",
    vColor = "party",
    type = "index",
    title = "",
    align.labels = list(c("right", "bottom"),
                        c("center", "center")),
    fontsize.labels = c(21, 10),
    # size of labels. Give the size per level of aggregation: size for group, size for subgroup, sub-subgroups...

    fontcolor.labels = c("white", "white"),
    # Color of labels
    palette = the_colors
  )
} else {
  shiny::HTML("No data (yet).")
}



```


:::

:::

## Geographical Exclusion

The following graphs depict the geographic locations that certain political advertisements will exclude on Meta, along with the amounts that parties spent on these exclusions.







::: {.panel-tabset}


### `r last30days_string`



::: {.panel-tabset}

#### Search



```{r}

secodndround <-   election_dat30 %>%
    filter(type == "location") %>% 
      mutate(amount_spent = as.numeric(total_spend_formatted)*total_spend_pct) %>% 
    select(amount_spent, page_name, value, location_type,is_exclusion, num_ads, party, page_id) %>%
    mutate(is_exclusion = as.logical(is_exclusion)) %>% 
    mutate(value = str_remove_all(value, ", Great Britain")) %>% 
    arrange(desc(amount_spent)) %>% 
    filter(is_exclusion) %>% 
    select(-is_exclusion)
htmltools::browsable(
  tagList(

  reactable(
    secodndround,
  columns = list(
    amount_spent = colDef(
      name = "💰 Spending",
      format = colFormat(prefix = "$", separators = TRUE, digits = 0),
      filterMethod = JS("filterMinValue"),
      filterInput = JS("rangeFilter"),
      filterable = TRUE
      # style = function(value) {
      #   # normalized <- (value - min(value)) / (max(value) - min(value))
      #   # background <- rgb(colorRamp(c("#e3f2fd", "#2196f3"))(normalized), maxColorValue = 255)
      #   list(background = "#2196f3", fontWeight = 600)
      # }#,
      # details = function(index) {
      #   value <- election_dat30$amount_spent[index]
      #   div(
      #     style = "padding: 8px"#,
      #     # progressBar(
      #     #   value = value / max(election_dat30$amount_spent),
      #     #   showLabel = TRUE,
      #     #   labelPosition = "bottom",
      #     #   labelStyle = "white-space: nowrap;"
      #     # )
      #   )
      # }
    ),
page_name = colDef(
  name = "📌 Page",
        cell = function(value, index) {
          # Access row-specific data using `index`
          theid <- secodndround[index, "page_id"]
    
    # Fallback for missing IDs
    if (is.na(theid) || length(theid) == 0) theid <- "unknown_page"
    
    # Build the hyperlink
    href <- if (theid != "unknown_page") {
      paste0("https://facebook.com/", theid)
    } else {
      "#"
    }
    
    # Return the link
    tags$a(
      href = href,
      target = "_blank",
      rel = "noopener noreferrer",
      style = "margin-left: 8px; color: #2196f3; text-decoration: none;",
      value  # Display the original value, not value_clean
    )
  },
  filterable = TRUE,
  filterInput = dataListFilter("elex2")
),
    value = colDef(      
      filterInput = dataListFilter("elex2"),

      filterable = TRUE,
      name = "🎯 Location",
      cell = function(value) tagList(
        span(style = "margin-right: 8px"),
        value,
        # a(href = paste0("https://www.google.com/maps/search/?api=1&query=", URLencode(value)),
a(
  href = paste0("https://www.google.com/maps/search/?api=1&query=", URLencode(paste(value, "Great Britain"))),
  target = "_blank",  # Opens link in a new tab/window
  rel = "noopener noreferrer",  # Security best practice
  icon("map-marker-alt"),
  style = "margin-left: 8px; color: #2196f3; text-decoration: none;"
)
      )
    ),
    location_type = colDef(
      name = "📌 Type",
      cell = function(value) tagList(
        # icon("facebook"),  # Use appropriate icon
        div(
          style = "margin-left: 8px; display: inline-block; vertical-align: middle;",
          value
        )
      ),
      filterable = TRUE,
      filterInput = dataListFilter("elex2")

    ),
    num_ads = colDef(
      name = "#️⃣ Ads",
        cell = function(value, index) {
          # Access row-specific data using `index`
          theid <- secodndround[index, "page_id"]
    
    # Fallback for missing IDs
    if (is.na(theid) || length(theid) == 0) theid <- "unknown_page"
    
    # Build the hyperlink
    href <- if (theid != "unknown_page") {
      paste0("https://www.facebook.com/ads/library/?view_all_page_id=", theid, "&country=",sets$cntry, "&active_status=all")
    } else {
      "#"
    }
    # Return the link
    tags$a(
      href = href,
      target = "_blank",
      rel = "noopener noreferrer",
      style = "margin-left: 8px; color: #2196f3; text-decoration: none;",
      value  # Display the original value, not value_clean
    )
    },
      filterable = TRUE,
      filterMethod = JS("filterMinValue"),
      filterInput = JS("rangeFilter")
    ),
    # is_exclusion = colDef(
    #   name = "🚫 Exclusion",
    #   cell = function(value) {
    #     status_style <- ifelse(value,
    #       "background: #ffebee; color: #c62828;",
    #       "background: #e8f5e9; color: #2e7d32;"
    #     )
    #     div(
    #       style = paste(status_style, "padding: 4px 8px; border-radius: 12px; display: inline-block;"),
    #       ifelse(value, "Excluded", "Included")
    #     )
    #   },
    #   filterable = TRUE),
    #   filterInput = function(values, name) {
    #     tags$select(
    #       onChange = JS(sprintf("Reactable.setFilter('%s', '%s', event.target.value || undefined)", "table-id", name)),
    #       tags$option(value = "", "All"),
    #       tags$option(value = "TRUE", "Excluded"),
    #       tags$option(value = "FALSE", "Included"),
    #       style = "width: 100%; padding: 4px; border-radius: 4px;"
    #     )
    #   }
    # )#,
    party = colDef(
      name = "📢 Party",
      cell = function(value) {
        # color_mapping <- c(color_dat$party = color_dat$colors)
        color_mapping <- setNames(color_dat$colors, color_dat$party)
        div(
          style = sprintf(
            "background: %s; color: %s; padding: 4px 8px; border-radius: 12px;
             display: inline-block; font-weight: 600; text-shadow: 0 1px 1px rgba(0,0,0,0.1);",
            color_mapping[value],
            "#FFFFFF"
          ),
          value
        )
      },
      filterable = TRUE,
      filterInput = dataListFilter("elex2")
    ),
        # Hide the `page_id` column
        page_id = colDef(show = FALSE)
      ),
  defaultPageSize = 10,
  # searchable = TRUE,
  showPageSizeOptions = TRUE,
  paginationType = "jump",
  theme = reactableTheme(
    headerStyle = list(
      backgroundColor = "#f8f9fa",
      borderBottom = "2px solid #dee2e6",
      fontWeight = 600,
      textTransform = "uppercase",
      letterSpacing = "0.5px"
    ),
    rowStyle = list(
      "&:hover" = list(backgroundColor = "rgba(33,150,243,0.1)"),
      transition = "background-color 0.3s ease"
    ),
    inputStyle = list(
      padding = "6px 12px",
      borderRadius = "4px",
      border = "1px solid #ced4da",
      "&:focus" = list(borderColor = "#2196f3", boxShadow = "0 0 0 0.2rem rgba(33,150,243,0.25)")
    )
  ),
  defaultColDef = colDef(
    headerClass = "header",
    align = "left",
    minWidth = 150
  ),
  bordered = TRUE,
  highlight = TRUE,
  # striped = TRUE,
  elementId = "elex2"#,
  # footer = div(
  #   style = "padding: 16px; background: #f8f9fa; border-top: 2px solid #dee2e6;",
  #   div(
  #     style = "display: flex; justify-content: space-between;",
  #     div(
  #       "Total Locations: ", strong(nrow(election_dat30)),
  #       style = "margin-right: 24px;"
  #     ),
  #     div(
  #       "Total Spending: ", strong(scales::dollar_format()(sum(election_dat30$amount_spent))),
  #       style = "color: #2196f3; font-weight: 600;"
  #     )
  #   )
  # )
),
    tags$button(
      tagList(fontawesome::fa("download"), "Download as CSV"),
      onclick = "Reactable.downloadDataCSV('elex2', 'exclusion.csv')"
    )
)
)
```


<br>

The table above shows spending data from Meta at the advertiser level, broken down per targeting criterion. This means we can’t account for combinations of targeting criteria.

For example, if one ad targets two ZIP codes with $100 and another targets just one of those ZIP codes with $100, we can’t separate the overlap. In this case, we record $200 spent on the shared ZIP code and $100 on the other.



#### Regions

> The size of each area in the chart indicates the amount of money spent by each political party on specific locations.

```{r,fig.width=10, fig.height=8, echo = F}
library(treemap)
region_dat <- election_dat30 %>%
  filter(type == "location") %>%
  filter(location_type == "regions") %>%
  filter(is_exclusion == T)  %>%
  mutate(likely_together = paste0(total_spend_pct,num_ads) %>% as.factor() %>% as.numeric()) %>%
  group_by(internal_id) %>%
  add_count(likely_together, name = "n_clusters") %>%
  ungroup() %>%
  mutate(total_spend_formatted = total_spend_formatted*total_spend_pct) %>%
  mutate(total_spend_formatted = total_spend_formatted/n_clusters) %>%
  group_by(party, value) %>%
  summarise(total_spend_formatted = sum(total_spend_formatted),
            num_ads = sum(num_ads)) %>%
  ungroup() %>%
  rename(region = value) %>%
  mutate(region = str_remove_all(region, ", Great Britain"))

the_colors <- region_dat %>%
  group_by(party) %>%
  summarize(total_spend_formatted = sum(total_spend_formatted)) %>%
  ungroup() %>%
  mutate(party = fct_relevel(party)) %>%
  left_join(color_dat) %>%
  arrange(party) %>%
  drop_na(colors) %>%
  pull(colors)

if(nrow(region_dat)!=0) {
  # Static version
  tm <- treemap(
    region_dat,
    index = c("party", "region"),
    vSize = "total_spend_formatted",
    vColor = "party",
    type = "index",
    title = "", draw = T,
    align.labels = list(c("right", "bottom"),
                        c("center", "center")),
    fontsize.labels = c(21, 10),
    # size of labels. Give the size per level of aggregation: size for group, size for subgroup, sub-subgroups...

    fontcolor.labels = c("white", "white"),
    # Color of labels
    palette = the_colors
  )


} else {
  shiny::HTML("No data (yet).")
}
#

```


#### Cities

> The size of each area in the chart indicates the amount of money spent by each political party on specific locations.

```{r,fig.width=10, fig.height=8}
library(treemap)
region_dat <- election_dat30 %>%
  filter(type == "location") %>%
  filter(location_type == "CITY") %>%
  filter(is_exclusion == T)  %>%
  mutate(likely_together = paste0(total_spend_pct,num_ads) %>% as.factor() %>% as.numeric()) %>%
  group_by(internal_id) %>%
  add_count(likely_together, name = "n_clusters") %>%
  ungroup() %>%
  mutate(total_spend_formatted = total_spend_formatted*total_spend_pct) %>%
  mutate(total_spend_formatted = total_spend_formatted/n_clusters) %>%
  group_by(party, value) %>%
  summarise(total_spend_formatted = sum(total_spend_formatted),
            num_ads = sum(num_ads)) %>%
  ungroup() %>%
  rename(region = value) %>%
  mutate(region = str_remove_all(region, ", Great Britain"))

the_colors <- region_dat %>%
  group_by(party) %>%
  summarize(total_spend_formatted = sum(total_spend_formatted)) %>%
  ungroup() %>%
  mutate(party = fct_relevel(party)) %>%
  left_join(color_dat) %>%
  arrange(party) %>%
  drop_na(colors) %>%
  pull(colors)

if(nrow(region_dat)!=0) {
  ## Static version
  tm <- treemap(
    region_dat,
    index = c("party", "region"),
    vSize = "total_spend_formatted",
    vColor = "party",
    type = "index",
    title = "",
    align.labels = list(c("right", "bottom"),
                        c("center", "center")),
    fontsize.labels = c(21, 10),
    # size of labels. Give the size per level of aggregation: size for group, size for subgroup, sub-subgroups...

    fontcolor.labels = c("white", "white"),
    # Color of labels
    palette = the_colors
  )
} else {
  shiny::HTML("No data (yet).")
}



```


:::

:::

